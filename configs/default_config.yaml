model_checkpoint: "google/mt5-small" # str: e.g. "google/mt5-base" or "google/mt5-large" or "google/mt5-xl" or "google/mt5-xxl"
model_name: "mt3-small-25k-baseline" # str
device: "cuda" # str: "cuda" or "cpu"
language: "da" # str: e.g. "da"
training_data:
  text_column: "text" # str
  summary_column: "summary" # str
  train_path: "/data/danish_summarization_danewsroom/train25k_clean.csv" # str
  val_path: "/data/danish_summarization_danewsroom/val25k_clean.csv" # str
  test_path: "/data/danish_summarization_danewsroom/test25k_clean.csv" # str
  max_input_length: 1024 # int:  max text (article) max token length
  max_target_length: 128 # int: max reference summary max token length
  pad_to_multiple_of: 8 # int: pad to multiple of
model:
  min_length: 15 # int: min summary length
  max_length: 128 # int: max summary length
  num_beams: 4 # int: number of beams for beam search
  no_repeat_ngram_size: 3 # int: no repeat ngram size
  length_penalty: 5.0 # float: length penalty
  early_stopping: True # bool: early stopping
  dropout: 0.1 # float: dropout

training:
  output_dir: "home/sarakolind/models" # str: output directory
  overwrite_output_dir: True # bool: overwrite output directory
  evaluation_strategy: "steps" # str: "steps" or "epoch"
  save_strategy: "steps" # str: "steps" or "epoch"
  learning_rate: 5e-5 # float: learning rate
  lr_scheduler_type: "constant" # str: "linear" or "cosine" or "cosine_with_restarts" or "polynomial" or "constant" or "constant_with_warmup"
  per_device_train_batch_size: 8 # int: batch size
  per_device_eval_batch_size: 8 # int: batch size
  logging_steps: 100 # int: log every x steps
  save_steps: 200 # int: save every x steps
  eval_steps: 200 # int: evaluate every x steps
  warm_up_steps: 100 # int: warm up steps
  save_total_limit: 1 # int: number of checkpoints to save
  num_train_epochs: 1 # int: number of epochs
  predict_with_generate: True # bool: predict with generate
  fp16: True # bool: use fp16
  load_best_model_at_end: True # bool: load best model at end
  metric_for_best_model: "loss" # str: metric for best model
